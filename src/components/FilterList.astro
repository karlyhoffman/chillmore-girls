---
import Card from '../components/Card.astro';
import '../styles/components/filter-list.scss';

const { items = [], filterValues = [], filterProperty = '' } = Astro.props;
---

{items.length && (
  <filter-list data-filter-property={filterProperty}>
    <div class="filter-list">

      <div class="filter-list__menu">
        <button
          value="reset"
          aria-selected="true"
          aria-disabled="true"
          disabled
        >
          All
        </button>
  
        {filterValues.map((type) => (
          <button value={type}>{type}</button>
        ))}
      </div>

      <ul class="filter-list__results" role="list">
        {items.map(({ title = '', slug, type = '', rating }) => {
          if (!title?.length || !slug?.length) return null;
          
          return (
            <li class="filter-list__results__item" data-filter-type={type}>
              <Card
                href={slug}
                title={title}
                rating={rating}
              />
            </li>
          )
        })}
      </ul>
    </div>
  </filter-list>
)}

<script>
  class FilterList extends HTMLElement {
    currentFilter: string;
    filterButtons: any[];
    items: any[];

    constructor() {
      super();
      // "In the class constructor, you can set up initial state 
      // and default values, register event listeners and perhaps 
      // create a shadow root. 
      // At this point, YOU SHOULD NOT inspect the element's attributes or children, 
      // or add new attributes or children." --MDN Web Docs

      const element = this;
      this.currentFilter = 'reset';
      this.filterButtons = [...element.querySelectorAll('.filter-list__menu button')] || [];
      this.items = [...element.querySelectorAll('li')] || [];
    }

    connectedCallback() {
      // "Called every time the element is inserted into the DOM. 
      // Useful for running setup code, such as fetching resources 
      // or rendering. Generally, you should try to delay work until 
      // this time." --MDN Web Docs

      this.enableFilterButtons();
    }

    enableFilterButtons() {
      this.filterButtons.forEach((button) => {
        button.addEventListener('click', () => this.handleFilterChange(button.value));
      });
    }

    handleFilterChange = (filterType) => {
      this.currentFilter = filterType;
  
      this.filterButtons.forEach((button) => {
        const buttonValue = button.value;
        if (buttonValue === filterType) {
          button.setAttribute('aria-selected', 'true');
          button.setAttribute('aria-disabled', 'true');
          button.disabled = true;
        } else {
          button.removeAttribute('aria-selected');
          button.removeAttribute('aria-disabled');
          button.removeAttribute("disabled");
        }
      });

      this.items.forEach((item) => {
        const itemFilterType = item.getAttribute('data-filter-type');
        if (filterType === 'reset' || itemFilterType === filterType) {
          item.classList.remove('hidden');
        } else {
          item.classList.add('hidden');
        }
      });
    }
  }

  customElements.define('filter-list', FilterList);
</script>