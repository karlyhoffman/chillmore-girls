---
import Card from '../components/Card.astro';
import styles from '../styles/components/filter-list.module.scss';

const { items = [] } = Astro.props;
const results = items.map(({ properties = {} }) => properties);
---

{items.length && (
  <filter-list data-items={JSON.stringify(results)}>
    <div class={styles['filter-list']}>

      <div class={styles['filter-list__filters']}>
        <button aria-selected="true" aria-disabled="true" disabled>All</button>
        <button>Pre-rolled</button>
        <button>Flower</button>
        <button>Edibles</button>
      </div>

      <ul class={styles['filter-list__results']} role="list">
        {results.map(({ Name }) => (
          <li>
            <Card
              href="#"
              title={Name.title[0].plain_text}
            />
          </li>
        ))}
      </ul>
    </div>
  </filter-list>
)}

<script>
  class FilterList extends HTMLElement {
    results: any[];

    constructor() {
      super();
      // "In the class constructor, you can set up initial state 
      // and default values, register event listeners and perhaps 
      // create a shadow root. 
      // At this point, YOU SHOULD NOT inspect the element's attributes or children, 
      // or add new attributes or children." --MDN Web Docs

      // const element = this;
      const { items = '[]' } = this.dataset;
      this.results = JSON.parse(items);
    }

    connectedCallback() {
      // "Called every time the element is inserted into the DOM. 
      // Useful for running setup code, such as fetching resources 
      // or rendering. Generally, you should try to delay work until 
      // this time." --MDN Web Docs

      this.renderFilterButtons();
    }

    renderFilterButtons() {
      // const { results } = this;

      const filters = this.results.reduce((acc, result) => {
        const { Type: type } = result;
        if (type?.select?.name && !acc.includes(type.select.name)) acc.push(type.select.name);

        return acc;
      }, []);

      console.log({filters});

      // const filterButtons = filters.map((filter) => {
      //   const button = document.createElement('button');
      //   button.textContent = filter;
      //   button.addEventListener('click', () => {
      //     this.filterResults(filter);
      //   });
      //   return button;
      // });

      // const container = document.createElement('div');
      // container.append(...filterButtons);
      // this.append(container);
    }
  }

  customElements.define('filter-list', FilterList);
</script>